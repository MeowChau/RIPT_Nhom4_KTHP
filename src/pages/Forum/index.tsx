import { useEffect, useState } from 'react';
import { PageContainer } from '@ant-design/pro-layout';
import { Input, Space, Badge, Button, Card, Modal, message } from 'antd';
import { BellOutlined, PlusOutlined } from '@ant-design/icons';
import { Link, history } from 'umi';
import BaiViet from '@/pages/Forum/components/BaiViet';
import type { BaiVietProps } from '@/pages/Forum/components/BaiViet';
import useBaiViet from '@/models/forum/useBaiViet';
import useThongBao from '@/models/forum/useThongBao';
import RewardsPage from '../Rewards';
import axios from 'axios';

// Define the type using the props from the BaiViet component
type BaiVietType = BaiVietProps['baiViet'];

export default () => {
  const { danhSachBaiViet, tuKhoaTimKiem, layDanhSachBaiViet, thichBaiViet, xoaBaiViet } = useBaiViet();

  const { soThongBaoChuaDoc } = useThongBao();

  const [showRewards, setShowRewards] = useState(false);

  // B·ªô ƒë·∫øm th·ªùi gian t·ªïng h·ª£p
  const [nextRun, setNextRun] = useState<number>(60);
  const [lastDuration, setLastDuration] = useState<number | null>(null);
  const [lastRun, setLastRun] = useState<string | null>(null);

  // Th√¥ng b√°o ƒëi·ªÉm nƒÉng n·ªï t·ª± ƒë·ªông
  const [autoPointNoti, setAutoPointNoti] = useState<string | null>(null);

  // Lu√¥n l·∫•y danh s√°ch b√†i vi·∫øt m·ªõi nh·∫•t khi v√†o trang
  useEffect(() => {
    // ƒê·∫£m b·∫£o l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ localStorage
    layDanhSachBaiViet(tuKhoaTimKiem);
  }, [tuKhoaTimKiem]);

  const handleTimKiem = (tuKhoa: string) => {
    layDanhSachBaiViet(tuKhoa);
  };

  // H√†m nh·∫≠n ƒëi·ªÉm nƒÉng n·ªï
  const handleClaimPoints = async () => {
    try {
      const token = localStorage.getItem('token');
      const res = await axios.post('/api/forum/posts/claim-points', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      message.success(res.data.message || 'Nh·∫≠n ƒëi·ªÉm nƒÉng n·ªï th√†nh c√¥ng!');
      layDanhSachBaiViet(tuKhoaTimKiem); // reload l·∫°i danh s√°ch b√†i vi·∫øt
    } catch (err: any) {
      message.error(err?.response?.data?.message || 'Kh√¥ng th·ªÉ nh·∫≠n ƒëi·ªÉm nƒÉng n·ªï.');
    }
  };

  // H√†m l·∫•y th√¥ng tin th·ªùi gian t·ªïng h·ª£p t·ª´ backend (gi·∫£ l·∫≠p qua API log)
  const fetchCronStatus = async () => {
    try {
      // Gi·∫£ l·∫≠p: g·ªçi API l·∫•y log cron g·∫ßn nh·∫•t (c·∫ßn backend h·ªó tr·ª£ n·∫øu mu·ªën realtime)
      // ·ªû ƒë√¢y s·∫Ω random s·ªë cho demo
      // N·∫øu backend c√≥ API th·ª±c, thay th·∫ø ƒëo·∫°n n√†y b·∫±ng fetch th·ª±c t·∫ø
      setLastDuration(Math.floor(Math.random() * 1000) + 100); // ms
      setLastRun(new Date().toLocaleString());
    } catch {
      setLastDuration(null);
      setLastRun(null);
    }
  };

  useEffect(() => {
    // ƒê·∫øm ng∆∞·ª£c ƒë·∫øn l·∫ßn t·ªïng h·ª£p ti·∫øp theo
    const timer = setInterval(() => {
      setNextRun((prev) => {
        if (prev <= 1) {
          fetchCronStatus(); // C·∫≠p nh·∫≠t th·ªùi gian th·ª±c thi m·ªõi
          return 60;
        }
        return prev - 1;
      });
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    const fetchNotifications = async () => {
      const token = localStorage.getItem('token');
      if (!token) return;
      try {
        const res = await axios.get('/api/forum/notifications', {
          headers: { Authorization: `Bearer ${token}` }
        });
        if (Array.isArray(res.data) && res.data.length > 0) {
          const latest = res.data[0];
          setAutoPointNoti(latest.message + ' (' + new Date(latest.createdAt).toLocaleString() + ')');
        }
      } catch {}
    };
    fetchNotifications();
  }, [nextRun]);

  return (
    <PageContainer
      header={{
        title: 'Di·ªÖn ƒë√†n H·ªôi vi√™n Gym',
        extra: [
          <Link to="/thong-bao" key="thongbao">
            <Badge count={soThongBaoChuaDoc} overflowCount={99}>
              <Button icon={<BellOutlined />}>Th√¥ng b√°o</Button>
            </Badge>
          </Link>,
          <Button 
            key="create" 
            type="primary" 
            icon={<PlusOutlined />}
            onClick={() => history.push('/user/forum/bai-viet')}
          >
            T·∫°o b√†i vi·∫øt
          </Button>,
          <Button
            key="rewards"
            type="default"
            icon={<span role="img" aria-label="gift">üéÅ</span>}
            onClick={() => setShowRewards(true)}
          >
            ƒê·ªïi qu√†
          </Button>,
          // <Button
          //   key="claim-points"
          //   type="dashed"
          //   icon={<span role="img" aria-label="fire">üî•</span>}
          //   onClick={handleClaimPoints}
          // >
          //   Nh·∫≠n ƒëi·ªÉm nƒÉng n·ªï
          // </Button>
        ]
      }}
    >
      {/* B·ªô ƒë·∫øm th·ªùi gian t·ªïng h·ª£p */}
      {autoPointNoti && (
        <Card style={{ marginBottom: 16, background: '#fffbe6', border: '1px solid #ffe58f' }}>
          <b>üîî Th√¥ng b√°o:</b> {autoPointNoti}
        </Card>
      )}
      <Card style={{ marginBottom: 16, background: '#f6ffed', border: '1px solid #b7eb8f' }}>
        <b>‚è≥ B·ªô ƒë·∫øm t·ªïng h·ª£p nƒÉng n·ªï:</b>
        <div>Th·ªùi gian ƒë·∫øn l·∫ßn t·ªïng h·ª£p ti·∫øp theo: <b>{nextRun}s</b></div>
        {lastDuration !== null && lastRun && (
          <div>
            L·∫ßn t·ªïng h·ª£p g·∫ßn nh·∫•t: <b>{lastRun}</b> | Th·ªùi gian th·ª±c thi: <b>{lastDuration} ms</b>
          </div>
        )}
      </Card>
      <Space direction="vertical" size={16} style={{ width: '100%' }}>
        <Card bordered={false}>
          <Input.Search
            placeholder="T√¨m ki·∫øm b√†i vi·∫øt"
            allowClear
            enterButton="T√¨m ki·∫øm"
            size="large"
            onSearch={handleTimKiem}
            style={{ marginBottom: 16 }}
          />
          {danhSachBaiViet.length > 0 ? (
            danhSachBaiViet.map((baiViet: BaiVietType) => (
              <BaiViet
                key={baiViet.id}
                baiViet={baiViet}
                onThich={thichBaiViet}
                onXoa={xoaBaiViet}
              />
            ))
          ) : (
            tuKhoaTimKiem ? `Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho '${tuKhoaTimKiem}'` : 
            'Ch∆∞a c√≥ b√†i vi·∫øt n√†o'
          )}
        </Card>
      </Space>
      <Modal
        visible={showRewards}
        onCancel={() => setShowRewards(false)}
        footer={null}
        width={900}
        title="ƒê·ªïi qu√† t·∫∑ng"
      >
        <RewardsPage />
      </Modal>
    </PageContainer>
  );
};